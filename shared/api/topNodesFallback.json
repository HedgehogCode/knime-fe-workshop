[
  {
    "nodeId": "org.knime.base.node.preproc.groupby.GroupByNodeFactory#GroupBy"
  },
  {
    "nodeId": "org.knime.base.node.preproc.joiner3.Joiner3NodeFactory#Joiner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.column.DataColumnSpecFilterNodeFactory#Column Filter"
  },
  {
    "nodeId": "org.knime.ext.poi3.node.io.filehandling.excel.reader.ExcelTableReaderNodeFactory#Excel Reader"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row3.RowFilterNodeFactory#Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.csv.reader.CSVTableReaderNodeFactory#CSV Reader"
  },
  {
    "nodeId": "org.knime.ext.poi3.node.io.filehandling.excel.writer.ExcelTableWriterNodeFactory#Excel Writer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row.RowFilterNodeFactory#Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringmanipulation.StringManipulationNodeFactory#String Manipulation"
  },
  {
    "nodeId": "org.knime.base.node.preproc.append.row.AppendedRowsNodeFactory#Concatenate"
  },
  {
    "nodeId": "org.knime.base.node.rules.engine.RuleEngineNodeFactory#Rule Engine"
  },
  {
    "nodeId": "org.knime.ext.jep.JEPNodeFactory#Math Formula"
  },
  {
    "nodeId": "org.knime.base.node.preproc.column.renamer.ColumnRenamerNodeFactory#Column Renamer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.pmml.missingval.compute.MissingValueHandlerNodeFactory#Missing Value"
  },
  {
    "nodeId": "org.knime.base.node.rules.engine.RuleEngineFilterNodeFactory#Rule-based Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.duplicates.DuplicateRowFilterNodeFactory#Duplicate Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.partition.PartitionNodeFactory#Partitioning"
  },
  {
    "nodeId": "org.knime.base.node.preproc.sorter.SorterNodeFactory#Sorter"
  },
  {
    "nodeId": "org.knime.base.views.node.barchart.BarChartNodeFactory#Bar Chart"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.csv.writer.CSVWriter2NodeFactory#CSV Writer"
  },
  {
    "nodeId": "org.knime.base.node.io.tablecreator.TableCreator2NodeFactory#Table Creator"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnresorter.ColumnResorterNodeFactory#Column Resorter"
  },
  {
    "nodeId": "org.knime.base.node.mine.scorer.accuracy.AccuracyScorer2NodeFactory#Scorer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colconvert.stringtonumber2.StringToNumber2NodeFactory#String to Number"
  },
  {
    "nodeId": "org.knime.time.node.convert.stringtodatetime.StringToDateTimeNodeFactory#String to Date&Time"
  },
  {
    "nodeId": "org.knime.base.views.node.scatterplot.ScatterPlotNodeFactory#Scatter Plot"
  },
  {
    "nodeId": "org.knime.expressions.base.node.formulas.FormulasNodeFactory#Column Expressions"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colconvert.numbertostring2.NumberToString2NodeFactory#Number to String"
  },
  {
    "nodeId": "org.knime.base.views.node.tableview.TableViewNodeFactory#Table View"
  },
  {
    "nodeId": "org.knime.base.node.preproc.pivot.Pivot2NodeFactory#Pivot"
  },
  {
    "nodeId": "org.knime.base.node.stats.viz.extended.ExtendedStatisticsNodeFactory#Statistics"
  },
  {
    "nodeId": "org.knime.base.node.preproc.constantvalue.ConstantValueColumnNodeFactory#Constant Value Column"
  },
  {
    "nodeId": "org.knime.base.node.flowvariable.tablerowtovariable3.TableToVariable3NodeFactory#Table Row to Variable"
  },
  {
    "nodeId": "org.knime.database.node.io.reader.DBReadNodeFactory#DB Reader"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.csv.reader.FileReaderNodeFactory#File Reader"
  },
  {
    "nodeId": "org.knime.base.node.preproc.normalize3.Normalizer3NodeFactory#Normalizer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row3.RowSplitterNodeFactory#Row Splitter"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.LoopEndDynamicNodeFactory#Loop End"
  },
  {
    "nodeId": "org.knime.base.node.preproc.cellsplit2.CellSplitter2NodeFactory#Cell Splitter"
  },
  {
    "nodeId": "org.knime.base.node.viz.property.color.ColorManager2NodeFactory#Color Manager"
  },
  {
    "nodeId": "org.knime.base.node.mine.decisiontree2.learner2.DecisionTreeLearnerNodeFactory3#Decision Tree Learner"
  },
  {
    "nodeId": "org.knime.base.node.mine.regression.linear2.learner.LinReg2LearnerNodeFactory2#Linear Regression Learner"
  },
  {
    "nodeId": "org.knime.base.views.node.piechart.PieChartNodeFactory#Pie Chart"
  },
  {
    "nodeId": "org.knime.base.node.mine.decisiontree2.predictor2.DecTreePredictorNodeFactory#Decision Tree Predictor"
  },
  {
    "nodeId": "org.knime.base.node.rules.engine.RuleEngineSplitterNodeFactory#Rule-based Row Splitter"
  },
  {
    "nodeId": "org.knime.base.expressions.node.row.mapper.ExpressionRowMapperNodeFactory#Expression"
  },
  {
    "nodeId": "org.knime.base.views.node.statistics.StatisticsNodeFactory#Statistics View"
  },
  {
    "nodeId": "org.knime.database.node.utility.tableselector.DBTableSelectNodeFactory#DB Table Selector"
  },
  {
    "nodeId": "org.knime.base.node.preproc.manipulator.TableManipulatorNodeFactory#Table Manipulator"
  },
  {
    "nodeId": "org.knime.database.node.io.reader.query.DBQueryReaderNodeFactory#DB Query Reader"
  },
  {
    "nodeId": "org.knime.base.node.mine.scorer.numeric2.NumericScorer2NodeFactory#Numeric Scorer"
  },
  {
    "nodeId": "org.knime.base.views.node.histogram.HistogramNodeFactory#Histogram"
  },
  {
    "nodeId": "org.knime.base.node.mine.regression.predict3.RegressionPredictorNodeFactory2#Regression Predictor"
  },
  {
    "nodeId": "org.knime.base.node.preproc.valuelookup.ValueLookupNodeFactory#Value Lookup"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rename.RenameNodeFactory#Column Rename"
  },
  {
    "nodeId": "org.knime.base.views.node.boxplot.BoxPlotNodeFactory#Box Plot"
  },
  {
    "nodeId": "org.knime.base.views.node.lineplot.LinePlotNodeFactory#Line Plot"
  },
  {
    "nodeId": "org.knime.base.node.preproc.correlation.compute2.CorrelationCompute2NodeFactory#Linear Correlation"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.rowref.RowFilterRefNodeFactory#Reference Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row.RowFilter2PortNodeFactory#Row Splitter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.nominal.NominalValueRowFilterNodeFactory#Nominal Value Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rowkey2.RowKeyNodeFactory2#RowID"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnappend2.ColumnAppender2NodeFactory#Column Appender"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rowagg.RowAggregatorNodeFactory#Row Aggregator"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.table.reader.KnimeTableReaderNodeFactory#Table Reader"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringreplacer.StringReplacerNodeFactory#String Replacer"
  },
  {
    "nodeId": "org.knime.python3.scripting.nodes2.script.PythonScriptNodeFactory#Python Script"
  },
  {
    "nodeId": "org.knime.time.node.extract.datetime.ExtractDateTimeFieldsNodeFactory2#Date&Time Part Extractor"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringmanipulation.multicolumn.MultiColumnStringManipulationNodeFactory#String Manipulation (Multi Column)"
  },
  {
    "nodeId": "org.knime.base.node.mine.cluster.kmeans.ClusterNodeFactory2#k-Means"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.randomforest.predictor.classification.RandomForestClassificationPredictorNodeFactory2#Random Forest Predictor"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.variable.start.LoopStartVariable3NodeFactory#Table Row to Variable Loop Start"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.randomforest.learner.classification.RandomForestClassificationLearnerNodeFactory2#Random Forest Learner"
  },
  {
    "nodeId": "org.knime.expressions.base.node.formulas.FormulasNodeFactory#Column Expressions (legacy)"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.listpaths.ListFilesAndFoldersNodeFactory#List Files/Folders"
  },
  {
    "nodeId": "org.knime.base.node.mine.regression.logistic.predictor.LogisticRegressionPredictorNodeFactory#Logistic Regression Predictor"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnaggregator.ColumnAggregatorNodeFactory#Column Aggregator"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnmerge.ColumnMergerNodeFactory#Column Merger"
  },
  {
    "nodeId": "org.knime.base.node.mine.regression.logistic.learner4.LogRegLearnerNodeFactory4#Logistic Regression Learner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.valcount.ValueCounterNodeFactory#Value Counter"
  },
  {
    "nodeId": "org.knime.base.views.node.roccurve.ROCCurveNodeFactory#ROC Curve"
  },
  {
    "nodeId": "org.knime.base.node.preproc.unpivot2.Unpivot2NodeFactory#Unpivot"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colcombine2.ColCombine2NodeFactory#Column Combiner"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.query.DBSQLQueryNodeFactory#DB Query"
  },
  {
    "nodeId": "org.knime.time.node.calculate.datetimedifference.DateTimeDifferenceNodeFactory#Date&Time Difference"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.group.GroupLoopStartNodeFactory#Group Loop Start"
  },
  {
    "nodeId": "org.knime.base.node.preproc.crossjoin.CrossJoinerNodeFactory#Cross Joiner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.ungroup.UngroupNodeFactory#Ungroup"
  },
  {
    "nodeId": "org.knime.base.node.preproc.transpose.TransposeTableNodeFactory#Table Transposer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columntrans2.One2ManyCol2NodeFactory#One to Many"
  },
  {
    "nodeId": "org.knime.time.node.convert.datetimetostring.DateTimeToStringNodeFactory#Date&Time to String"
  },
  {
    "nodeId": "org.knime.time.node.filter.datetimebasedrowfilter.DateTimeBasedRowFilterNodeFactory#Date&Time-based Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.table.writer.TableWriterNodeFactory#Table Writer"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.joiner.DBJoinNodeFactory#DB Joiner"
  },
  {
    "nodeId": "org.knime.json.node.jsonpath.multi.JSONPathNodeFactory#JSON Path"
  },
  {
    "nodeId": "org.knime.ext.jep.multicolumn.MultiColumnJEPNodeFactory#Math Formula (Multi Column)"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.filter.row.DBFilterRowNodeFactory#DB Row Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.missingvaluecolfilter.MissingValueColumnFilterNodeFactory#Missing Value Column Filter"
  },
  {
    "nodeId": "org.knime.database.node.io.write.DBWriteNodeFactory#DB Writer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colconvert.stringtonumber2.StringToNumber2NodeFactory#String To Number"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringcleaner.StringCleanerNodeFactory#String Cleaner"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.groupby.DBGroupByNodeFactory#DB GroupBy"
  },
  {
    "nodeId": "org.knime.base.node.jsnippet.JavaSnippetNodeFactory#Java Snippet"
  },
  {
    "nodeId": "org.knime.base.node.preproc.split2.SplitNodeFactory2#Column Splitter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringmanipulation.variable.StringManipulationVariableNodeFactory#String Manipulation (Variable)"
  },
  {
    "nodeId": "org.knime.base.expressions.node.ExpressionNodeFactory#Expression"
  },
  {
    "nodeId": "org.knime.time.node.manipulate.datetimeshift.DateTimeShiftNodeFactory#Date&Time Shift"
  },
  {
    "nodeId": "org.knime.base.node.flowvariable.variabletotablerow4.VariableToTable4NodeFactory#Variable to Table Row"
  },
  {
    "nodeId": "org.knime.base.views.node.heatmap.HeatmapNodeFactory#Heatmap"
  },
  {
    "nodeId": "org.knime.base.node.stats.outlier.handler.NumericOutliersNodeFactory#Numeric Outliers"
  },
  {
    "nodeId": "org.knime.database.node.connector.generic.DBConnectorNodeFactory#DB Connector"
  },
  {
    "nodeId": "org.knime.dynamic.js.v30.DynamicJSNodeFactory#Bar Chart (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.node.stats.dataexplorer.DataExplorerNodeFactory#Data Explorer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colautotypecast.ColumnAutoTypeCasterNodeFactory#Column Auto Type Cast"
  },
  {
    "nodeId": "org.knime.base.node.preproc.sample.SamplingNodeFactory#Row Sampling"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.chunk.LoopStartChunkNodeFactory#Chunk Loop Start"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.plotter.scatterSelectionAppender.ScatterPlotNodeFactory#Scatter Plot (JavaScript)"
  },
  {
    "nodeId": "org.knime.rest.nodes.get.RestGetNodeFactory#GET Request"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnlag.LagColumnNodeFactory#Lag Column"
  },
  {
    "nodeId": "org.knime.base.node.io.variablecreator.VariableCreatorNodeFactory#Variable Creator"
  },
  {
    "nodeId": "org.knime.ext.microsoft.authentication.node.MicrosoftAuthenticatorNodeFactory#Microsoft Authenticator"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.variable.end.LoopEndVariableNodeFactory#Variable Loop End"
  },
  {
    "nodeId": "org.knime.base.node.util.mergevariables.MergeVariables2NodeFactory#Merge Variables"
  },
  {
    "nodeId": "org.knime.base.views.node.scatterplotmatrix.ScatterPlotMatrixNodeFactory#Scatter Plot Matrix"
  },
  {
    "nodeId": "org.knime.base.node.preproc.normalize.NormalizerDeNodeFactory#Denormalizer"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row2.RowFilterNodeFactory#Row Filter (Labs)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.pivot.Pivot2NodeFactory#Pivoting"
  },
  {
    "nodeId": "org.knime.time.node.create.createdatetime.CreateDateTimeNodeFactory#Create Date&Time Range"
  },
  {
    "nodeId": "org.knime.json.node.totable.JSONToTableNodeFactory#JSON to Table"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rank.RankNodeFactory#Rank"
  },
  {
    "nodeId": "org.knime.js.base.node.scorer.ScorerNodeFactory#Scorer (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.binner.BinnerNodeFactory#Numeric Binner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnrenameregex.ColumnRenameRegexNodeFactory#Column Rename (Regex)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colconvert.numbertostring2.NumberToString2NodeFactory#Number To String"
  },
  {
    "nodeId": "org.knime.base.node.mine.knn.KnnNodeFactory2#K Nearest Neighbor"
  },
  {
    "nodeId": "org.knime.time.node.extract.datetime.ExtractDateTimeFieldsNodeFactory2#Extract Date&Time Fields"
  },
  {
    "nodeId": "org.knime.google.api.sheets.nodes.reader.GoogleSheetsReaderFactory#Google Sheets Reader"
  },
  {
    "nodeId": "org.knime.base.views.node.textview.TextViewNodeFactory#Text View"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.stringtopath.variable.StringToPathVariableNodeFactory#String to Path (Variable)"
  },
  {
    "nodeId": "org.knime.base.node.meta.xvalidation.XValidatePartitionerFactory#X-Partitioner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.topk.TopKSelectorNodeFactory#Top k Row Filter"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.executor.DBExecutorNodeFactory#DB SQL Executor"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colconvert.categorytonumber2.CategoryToNumberNodeFactory2#Category to Number"
  },
  {
    "nodeId": "org.knime.base.node.mine.svm.learner.SVMLearnerNodeFactory2#SVM Learner"
  },
  {
    "nodeId": "org.knime.base.node.switches.emptytableswitch.EmptyTableSwitchNodeFactory#Empty Table Switch"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.pathtostring.PathToStringNodeFactory#Path to String"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.nominal.NominalValueRowSplitterNodeFactory#Nominal Value Row Splitter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.normalize.NormalizerApplyNodeFactory#Normalizer (Apply)"
  },
  {
    "nodeId": "org.knime.base.views.node.generic.GenericEChartsNodeFactory#Generic ECharts View"
  },
  {
    "nodeId": "org.knime.base.node.preproc.double2int2.DoubleToIntNodeFactory#Double to Integer"
  },
  {
    "nodeId": "org.knime.database.extension.mssql.node.connector.MSSQLDBConnectorNodeFactory#Microsoft SQL Server Connector"
  },
  {
    "nodeId": "org.knime.xml.node.xpath2.XPathNodeFactory#XPath"
  },
  {
    "nodeId": "org.knime.database.extension.sqlite.node.connector.SQLiteDBConnectorNodeFactory#SQLite Connector"
  },
  {
    "nodeId": "org.knime.base.node.preproc.domain.dialog2.DomainNodeFactory#Domain Calculator"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rowtocolumnheader.RowToColumnHeaderNodeFactory#Row to Column Names"
  },
  {
    "nodeId": "org.knime.base.node.flowvariable.tablecoltovariable4.TableColumnToVariable4NodeFactory#Table Column to Variable"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnheaderextract.ColumnHeaderExtractorNodeFactory#Column Name Extractor"
  },
  {
    "nodeId": "org.knime.base.node.mine.svm.predictor2.SVMPredictorNodeFactory#SVM Predictor"
  },
  {
    "nodeId": "org.knime.base.node.switches.caseswitch.any.CaseStartAnyNodeFactory#CASE Switch Start"
  },
  {
    "nodeId": "org.knime.base.node.preproc.autobinner3.AutoBinnerLearnNodeFactory#Auto-Binner"
  },
  {
    "nodeId": "org.knime.base.node.viz.crosstable.CrosstabNodeFactory#Crosstab"
  },
  {
    "nodeId": "org.knime.base.node.meta.xvalidation.AggregateOutputNodeFactory#X-Aggregator"
  },
  {
    "nodeId": "org.knime.reporting2.nodes.pdfwriter.ReportPdfWriterNodeFactory#Report PDF Writer"
  },
  {
    "nodeId": "org.knime.google.api.nodes.authenticator.GoogleAuthenticatorNodeFactory#Google Authenticator"
  },
  {
    "nodeId": "org.knime.base.node.preproc.pmml.missingval.apply.MissingValueApplyNodeFactory#Missing Value (Apply)"
  },
  {
    "nodeId": "org.knime.database.extension.mysql.node.connector.MySQLDBConnectorNodeFactory#MySQL Connector"
  },
  {
    "nodeId": "org.knime.database.node.io.insert.DBInsertNodeFactory#DB Insert"
  },
  {
    "nodeId": "org.knime.base.node.mine.cluster.eval.silhouette.SilhouetteCoefficientNodeFactory#Silhouette Coefficient"
  },
  {
    "nodeId": "org.knime.time.node.manipulate.modifydate.ModifyDateNodeFactory#Modify Date"
  },
  {
    "nodeId": "org.knime.database.node.utility.tablecreator.DBTableCreateNodeFactory2#DB Table Creator"
  },
  {
    "nodeId": "org.knime.base.node.mine.bayes.naivebayes.learner3.NaiveBayesLearnerNodeFactory4#Naive Bayes Learner"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.randomforest.predictor.regression.RandomForestRegressionPredictorNodeFactory#Random Forest Predictor (Regression)"
  },
  {
    "nodeId": "org.knime.base.views.node.stackedareachart.StackedAreaChartNodeFactory#Stacked Area Chart"
  },
  {
    "nodeId": "org.knime.base.node.switches.manualif.ManualIfNodeFactory#IF Switch"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.filter.column.DBFilterColumnNodeFactory#DB Column Filter"
  },
  {
    "nodeId": "org.knime.base.node.mine.bayes.naivebayes.predictor4.NaiveBayesPredictorNodeFactory3#Naive Bayes Predictor"
  },
  {
    "nodeId": "org.knime.base.node.stats.correlation.rank2.RankCorrelationCompute2NodeFactory#Rank Correlation"
  },
  {
    "nodeId": "org.knime.base.node.switches.endif.EndifNodeFactory#End IF"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.randomforest.learner.regression.RandomForestRegressionLearnerNodeFactory#Random Forest Learner (Regression)"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.stringtopath.StringToPathNodeFactory#String to Path"
  },
  {
    "nodeId": "org.knime.base.node.mine.cluster.assign.ClusterAssignerNodeFactory#Cluster Assigner"
  },
  {
    "nodeId": "org.knime.base.node.viz.plotter.scatter.ScatterPlotterNodeFactory#Scatter Plot (legacy)"
  },
  {
    "nodeId": "org.knime.base.node.mine.neural.rprop.RPropNodeFactory2#RProp MLP Learner"
  },
  {
    "nodeId": "org.knime.base.node.preproc.stringreplacer.dict2.StringReplacerDictNodeFactory#String Replacer (Dictionary)"
  },
  {
    "nodeId": "org.knime.js.base.node.configuration.input.date.DateDialogNodeFactory#Date&Time Configuration"
  },
  {
    "nodeId": "org.knime.base.node.mine.subgroupminer.SubgroupMinerFactory2#Association Rule Learner"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.pagedTable.PagedTableViewNodeFactory#Table View (JavaScript)"
  },
  {
    "nodeId": "org.knime.ext.poi3.node.io.filehandling.excel.sheets.ExcelSheetReaderNodeFactory#Read Excel Sheet Names"
  },
  {
    "nodeId": "org.knime.ext.sharepoint.filehandling.node.SharepointConnectionNodeFactory#SharePoint Online Connector"
  },
  {
    "nodeId": "org.knime.base.node.mine.smote.SmoteNodeFactory#SMOTE"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.columnref.ColumnFilterRefNodeFactory#Reference Column Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rounddouble.RoundDoubleNodeFactory#Number Rounder"
  },
  {
    "nodeId": "org.knime.base.node.switches.caseswitch.any.CaseEndAnyNodeFactory#CASE Switch End"
  },
  {
    "nodeId": "org.knime.base.node.mine.neural.mlp2.MLPPredictorNodeFactory#MultiLayerPerceptron Predictor"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.columnlist2.ColumnListLoopStartNodeFactory#Column List Loop Start"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.plotter.line.LinePlotNodeFactory#Line Plot (JavaScript)"
  },
  {
    "nodeId": "org.knime.timeseries.node.stringtotimestamp.String2DateNodeFactory#String to Date/Time (legacy)"
  },
  {
    "nodeId": "org.knime.base.node.rules.engine.RuleEngineVariableNodeFactory#Rule Engine Variable"
  },
  {
    "nodeId": "org.knime.ext.textprocessing.nodes.transformation.stringstodocument.StringsToDocumentNodeFactory2#Strings to Document"
  },
  {
    "nodeId": "org.knime.reporting2.nodes.create.ReportTemplateCreatorNodeFactory#Report Template Creator"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.plotter.roc.ROCCurveNodeFactory#ROC Curve (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.views.node.parallelcoordinatesplot.ParallelCoordinatesPlotNodeFactory#Parallel Coordinates Plot"
  },
  {
    "nodeId": "org.knime.dynamic.js.v30.DynamicJSNodeFactory#Box Plot (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.views.node.densityplot.DensityPlotNodeFactory#Density Plot"
  },
  {
    "nodeId": "org.knime.base.views.node.imageview.ImageViewNodeFactory#Image View"
  },
  {
    "nodeId": "org.knime.base.node.flowvariable.appendvariabletotable4.AppendVariableToTable4NodeFactory#Variable to Table Column"
  },
  {
    "nodeId": "org.knime.datageneration.counter.CounterGenerationNodeFactory#Counter Generation"
  },
  {
    "nodeId": "org.knime.base.node.flowcontrol.sleep.SleepNodeFactory#Wait..."
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.rowref.RowSplitRefNodeFactory#Reference Row Splitter"
  },
  {
    "nodeId": "org.knime.google.api.sheets.nodes.connector.GoogleSheetsConnectorFactory#Google Sheets Connector"
  },
  {
    "nodeId": "org.knime.js.base.node.configuration.input.string.StringDialogNodeFactory#String Configuration"
  },
  {
    "nodeId": "org.knime.base.node.preproc.regexsplit.RegexSplitNodeFactory#String Splitter (Regex)"
  },
  {
    "nodeId": "org.knime.optimization.internal.node.parameter.loopstart.LoopStartParOptNodeFactory#Parameter Optimization Loop Start"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.imagewriter.ImagePortWriterNodeFactory#Image Writer (Port)"
  },
  {
    "nodeId": "org.knime.json.node.filehandling.reader.JSONReaderNodeFactory#JSON Reader"
  },
  {
    "nodeId": "org.knime.base.node.preproc.correlation.filter.CorrelationFilterNodeFactory#Correlation Filter"
  },
  {
    "nodeId": "org.knime.chem.base.node.io.sdf.SDFReader3NodeFactory#SDF Reader"
  },
  {
    "nodeId": "org.knime.base.node.mine.transformation.pca.perform.PCA2NodeFactory#PCA"
  },
  {
    "nodeId": "org.knime.base.node.preproc.caseconvert.CaseConvertNodeFactory#Case Converter"
  },
  {
    "nodeId": "org.knime.optimization.internal.node.parameter.loopend.LoopEndParOptNodeFactory#Parameter Optimization Loop End"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.decisiontree.classification.DecisionTreeViewNodeFactory#Decision Tree View (JavaScript)"
  },
  {
    "nodeId": "org.knime.python2.nodes.script2.Python2ScriptNodeFactory2#Python Script (legacy)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.table.cropper.TableCropperNodeFactory#Table Cropper"
  },
  {
    "nodeId": "org.knime.dynamic.js.v30.DynamicJSNodeFactory#Histogram (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.addemptyrows.AddEmptyRowsNodeFactory#Add Empty Rows"
  },
  {
    "nodeId": "org.knime.base.node.mine.cluster.hierarchical.HierarchicalClusterNodeFactory#Hierarchical Clustering"
  },
  {
    "nodeId": "org.knime.base.node.util.sendmail.SendMailNodeFactory#Send Email"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.definition.apply.FilterApplyNodeFactory#Filter Apply"
  },
  {
    "nodeId": "org.knime.base.expressions.node.row.filter.ExpressionRowFilterNodeFactory#Expression Row Filter"
  },
  {
    "nodeId": "org.knime.base.views.node.sunburstchart.SunburstChartNodeFactory#Sunburst Chart"
  },
  {
    "nodeId": "org.knime.database.extension.postgres.node.connector.PostgreSQLDBConnectorNodeFactory#PostgreSQL Connector"
  },
  {
    "nodeId": "org.knime.timeseries.node.movagg.MovingAggregationNodeFactory#Moving Aggregator"
  },
  {
    "nodeId": "org.knime.base.collection.list.create2.CollectionCreate2NodeFactory#Create Collection Column"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.model.writer.ModelWriterNodeFactory#Model Writer"
  },
  {
    "nodeId": "org.knime.time.node.manipulate.modifytime.ModifyTimeNodeFactory#Modify Time"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.transfer.filechooser.TransferFilesFileChooserNodeFactory#Transfer Files"
  },
  {
    "nodeId": "org.knime.js.base.node.configuration.input.credentials.CredentialsDialogNodeFactory#Credentials Configuration"
  },
  {
    "nodeId": "org.knime.ext.jep.variable.JEPVariableNodeFactory#Math Formula (Variable)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.columnheaderinsert.ColumnHeaderInsertNodeFactory#Column Renamer (Dictionary)"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.pmml.writer.PMMLWriterNodeFactory2#PMML Writer"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.variable.start.LoopStartVariable3NodeFactory#Table Row To Variable Loop Start"
  },
  {
    "nodeId": "org.knime.bigdata.fileformats.filehandling.reader.parquet.ParquetTableReaderNodeFactory2#Parquet Reader"
  },
  {
    "nodeId": "org.knime.reporting.nodes.dataset.ReportingDataSetNodeFactory#Data to Report (BIRT)"
  },
  {
    "nodeId": "org.knime.chem.base.node.converter.parser.MolParserNodeFactory#Molecule Type Cast"
  },
  {
    "nodeId": "org.knime.base.node.viz.property.shape.ShapeManagerNodeFactory#Shape Manager"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.LoopStartCountDynamicNodeFactory#Counting Loop Start"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.gradientboosting.learner.classification.GradientBoostingClassificationLearnerNodeFactory2#Gradient Boosted Trees Learner"
  },
  {
    "nodeId": "org.knime.dynamic.js.v30.DynamicJSNodeFactory#Conditional Box Plot (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.filereader.FileReaderNodeFactory#File Reader (Complex Format)"
  },
  {
    "nodeId": "org.knime.google.api.sheets.nodes.spreadsheetwriter.GoogleSpreadsheetWriterFactory#Google Sheets Writer"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.gradientboosting.predictor.classification.GradientBoostingClassificationPredictorNodeFactory3#Gradient Boosted Trees Predictor"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.regressiontree.learner.RegressionTreeLearnerNodeFactory#Simple Regression Tree Learner"
  },
  {
    "nodeId": "org.knime.dynamic.js.v30.DynamicJSNodeFactory#Pie/Donut Chart (JavaScript)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.colcompare.ColumnComparatorNodeFactory#Column Comparator"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.pathtostring.variable.PathToStringVariableNodeFactory#Path to String (Variable)"
  },
  {
    "nodeId": "org.knime.base.node.mine.regression.polynomial.learner2.PolyRegLearnerNodeFactory2#Polynomial Regression Learner"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.LoopEndJoin2NodeFactory#Loop End (Column Append)"
  },
  {
    "nodeId": "org.knime.base.node.preproc.rounddouble.RoundDoubleNodeFactory#Round Double"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.condition.LoopStartGenericDynamicNodeFactory#Generic Loop Start"
  },
  {
    "nodeId": "org.knime.base.expressions.node.variable.ExpressionFlowVariableNodeFactory#Variable Expression"
  },
  {
    "nodeId": "org.knime.python3.scripting.nodes2.view.PythonViewNodeFactory#Python View"
  },
  {
    "nodeId": "org.knime.ext.textprocessing.nodes.source.parser.pdf.PDFDocumentParserNodeFactory#PDF Parser"
  },
  {
    "nodeId": "org.knime.expressions.base.node.variableexpression.VariableExpressionsNodeFactory#Variable Expressions"
  },
  {
    "nodeId": "org.knime.ext.textprocessing.nodes.transformation.bow.BagOfWordsNodeFactory2#Bag Of Words Creator"
  },
  {
    "nodeId": "org.knime.base.node.viz.plotter.scattermatrix.ScatterMatrixNodeFactory#Scatter Matrix (legacy)"
  },
  {
    "nodeId": "org.knime.json.node.fromtable.TableToJsonNodeFactory#Table to JSON"
  },
  {
    "nodeId": "org.knime.dl.keras.base.nodes.layers.core.dense.DLKerasDenseLayerNodeFactory2#Keras Dense Layer"
  },
  {
    "nodeId": "org.knime.json.node.fromstring.StringToJSONNodeFactory#String to JSON"
  },
  {
    "nodeId": "org.knime.base.node.mine.treeensemble2.node.regressiontree.predictor.RegressionTreePredictorNodeFactory#Simple Regression Tree Predictor"
  },
  {
    "nodeId": "org.knime.rest.nodes.post.RestPostNodeFactory#POST Request"
  },
  {
    "nodeId": "org.knime.filehandling.utility.nodes.createpaths.CreatePathVariablesNodeFactory#Create File/Folder Variables"
  },
  {
    "nodeId": "org.knime.database.extension.oracle.node.connector.OracleDBConnectorNodeFactory#Oracle Connector"
  },
  {
    "nodeId": "org.knime.base.node.util.extracttablespec.ExtractTableSpecNodeFactory#Extract Table Spec"
  },
  {
    "nodeId": "org.knime.database.node.disposal.connection.DBCloseConnectionNodeFactory#DB Connection Closer"
  },
  {
    "nodeId": "org.knime.base.node.viz.table.TableNodeFactory#Interactive Table (legacy)"
  },
  {
    "nodeId": "org.knime.base.node.viz.histogram.node.HistogramNodeFactory#Interactive Histogram (legacy)"
  },
  {
    "nodeId": "org.knime.base.node.io.filehandling.model.reader.ModelReaderNodeFactory#Model Reader"
  },
  {
    "nodeId": "org.knime.base.node.preproc.cellsplitbypos.CellSplitterByPosNodeFactory#Cell Splitter By Position"
  },
  {
    "nodeId": "org.knime.base.node.util.extracttabledimension.ExtractTableDimensionNodeFactory#Extract Table Dimension"
  },
  {
    "nodeId": "org.knime.xml.node.filehandling.reader.XMLReaderNodeFactory2#XML Reader"
  },
  {
    "nodeId": "org.knime.ext.textprocessing.nodes.preprocessing.stopwordfilter.StopWordFilterNodeFactory3#Stop Word Filter"
  },
  {
    "nodeId": "org.knime.base.node.preproc.tablediff.TableDifferNodeFactory#Table Difference Finder"
  },
  {
    "nodeId": "org.knime.base.node.preproc.joiner.Joiner2NodeFactory#Joiner"
  },
  {
    "nodeId": "org.knime.base.node.meta.looper.recursive.RecursiveLoopStartDynamicNodeFactory#Recursive Loop Start"
  },
  {
    "nodeId": "org.knime.js.base.node.widget.selection.value.ValueSelectionWidgetNodeFactory#Value Selection Widget"
  },
  {
    "nodeId": "org.knime.database.node.io.update.DBUpdateNodeFactory#DB Update"
  },
  {
    "nodeId": "org.knime.base.node.mine.decisiontree2.image.DecTreeToImageNodeFactory#Decision Tree to Image"
  },
  {
    "nodeId": "org.knime.base.node.preproc.filter.row2.RowSplitterNodeFactory#Row Splitter (Labs)"
  },
  {
    "nodeId": "org.knime.base.node.mine.dbscan.DBSCANNodeFactory#DBSCAN"
  },
  {
    "nodeId": "org.knime.js.base.node.widget.reexecution.refresh.RefreshButtonWidgetNodeFactory#Refresh Button Widget"
  },
  {
    "nodeId": "org.knime.distmatrix.calculate2.DistanceMatrixCalculate2NodeFactory#Distance Matrix Calculate"
  },
  {
    "nodeId": "org.knime.base.node.preproc.transpose.TransposeTableNodeFactory#Transpose"
  },
  {
    "nodeId": "org.knime.database.node.io.load.node.DBLoaderNodeFactory2#DB Loader"
  },
  {
    "nodeId": "org.knime.base.node.flowcontrol.trycatch.genericcatch.DataPortCatchNodeFactory#Catch Errors (Data Ports)"
  },
  {
    "nodeId": "org.knime.distance.measure.numerical.NumericalDistanceNodeFactory#Numeric Distances"
  },
  {
    "nodeId": "org.knime.js.base.node.widget.input.string.StringWidgetNodeFactory#String Widget"
  },
  {
    "nodeId": "org.knime.database.node.manipulation.columnrename.DBRenameColumnNodeFactory#DB Column Rename"
  },
  {
    "nodeId": "org.knime.base.node.preproc.unpivot2.Unpivot2NodeFactory#Unpivoting"
  },
  {
    "nodeId": "org.knime.js.base.node.viz.plotter.scatterSelectionAppender.ScatterPlotNodeFactory#Scatter Plot"
  },
  {
    "nodeId": "org.knime.chem.base.node.io.sdfwriter2.SDFWriterNodeFactory#SDF Writer"
  }
]
